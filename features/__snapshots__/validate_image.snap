[happy day with git config and yaml:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=95175b6ea9bb28c645186c6624ff904812ebbca7"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with git config and yaml:stderr - 1]

---

[JUnit and AppStudio output format:stdout - 1]
<testsuites tests="7" failures="3"><testsuite name="Unnamed (${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST})" tests="7" failures="3" errors="0" id="0" time="" timestamp="${TIMESTAMP}"><properties><property name="image" value="${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}"></property><property name="key" value="${known_PUBLIC_KEY_XML}"></property><property name="success" value="false"></property><property name="keyId" value=""></property><property name="signature" value="${IMAGE_SIGNATURE_acceptance/image}"></property></properties><testcase name="builtin.attestation.signature_check: Pass" classname="builtin.attestation.signature_check: Pass"></testcase><testcase name="builtin.attestation.syntax_check: Pass" classname="builtin.attestation.syntax_check: Pass"></testcase><testcase name="builtin.image.signature_check: Pass" classname="builtin.image.signature_check: Pass"></testcase><testcase name="main.acceptor: Pass" classname="main.acceptor: Pass"></testcase><testcase name="main.reject_with_term: Fails always (term1)" classname="main.reject_with_term: Fails always (term1)"><failure message="Fails always (term1)"><![CDATA[Fails always (term1)]]></failure></testcase><testcase name="main.reject_with_term: Fails always (term2)" classname="main.reject_with_term: Fails always (term2)"><failure message="Fails always (term2)"><![CDATA[Fails always (term2)]]></failure></testcase><testcase name="main.rejector: Fails always" classname="main.rejector: Fails always"><failure message="Fails always"><![CDATA[Fails always]]></failure></testcase></testsuite></testsuites>

---

[JUnit and AppStudio output format:stderr - 1]
Error: success criteria not met

---
[JUnit and AppStudio output format:stdout - 2]
{
  "timestamp": "${TIMESTAMP}",
  "namespace": "",
  "successes": 4,
  "failures": 3,
  "warnings": 0,
  "result": "FAILURE"
}
---
[JUnit and AppStudio output format:stderr - 2]
Error: success criteria not met

---
[policy and data sources:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Failure due to overripeness"
        },
        {
          "msg": "Failure due to spider attack"
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/banana_check.git?ref=c6cafb797f5afa8b9c7b1c54ea7bf0ca35368e21"
        ],
        "data": [
          "git::${GITHOST}/git/banana_data_1.git?ref=62e50acbb1a230a3f11ca1858fc053b21fe5cc82"
        ]
      },
      {
        "policy": [
          "git::${GITHOST}/git/banana_check.git?ref=c6cafb797f5afa8b9c7b1c54ea7bf0ca35368e21"
        ],
        "data": [
          "git::${GITHOST}/git/banana_data_2.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy and data sources:stderr - 1]
Error: success criteria not met

---

[inline policy:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[inline policy:stderr - 1]

---

[happy day with git config and json:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=95175b6ea9bb28c645186c6624ff904812ebbca7"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with git config and json:stderr - 1]

---

[future failure is converted to a warning:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "warnings": [
        {
          "msg": "Fails in 2099",
          "metadata": {
            "effective_on": "${TIMESTAMP}"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/future-deny-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[future failure is converted to a warning:stderr - 1]

---

[Custom rule data:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.missing_data"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.missing_data"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.unexpected_data"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.unexpected_data"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/my-policy1.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "custom": "data1"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/my-policy2.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "other": "data2"
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Custom rule data:stderr - 1]

---

[multiple policy sources with multiple source groups:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-multiple-sources@sha256:${REGISTRY_acceptance/ec-multiple-sources:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Has a warning"
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-multiple-sources}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-multiple-sources}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/repository1.git?ref=95175b6ea9bb28c645186c6624ff904812ebbca7"
        ]
      },
      {
        "policy": [
          "git::${GITHOST}/git/repository2.git?ref=9998384962ba66481defc409b0f821d222ba3366"
        ]
      },
      {
        "policy": [
          "git::${GITHOST}/git/repository3.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[multiple policy sources with multiple source groups:stderr - 1]
Error: success criteria not met

---

[mismatched image digest in signature:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/bad-actor@sha256:${REGISTRY_acceptance/bad-actor:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image signatures found matching the given public key. Verify the correct public key was provided, and a signature was created. Error: no matching signatures: invalid or missing digest in claim: sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/bad-actor}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/mismatched-image-digest.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[mismatched image digest in signature:stderr - 1]
Error: success criteria not met

---

[policy rule filtering:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass_with_collection"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ],
        "config": {
          "exclude": [
            "filtering.always_fail",
            "filtering.always_fail_with_collection"
          ],
          "include": [
            "@stamps",
            "filtering.always_pass"
          ]
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering:stderr - 1]

---

[policy rule filtering on imageRef:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass_with_collection"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ],
        "config": {
          "include": [
            "@stamps",
            "filtering.always_pass"
          ]
        },
        "volatileConfig": {
          "exclude": [
            {
              "value": "filtering.always_fail",
              "imageRef": "sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}"
            },
            {
              "value": "filtering.always_fail_with_collection",
              "imageRef": "sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}"
            }
          ]
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering on imageRef:stderr - 1]

---

[application snapshot reference:stdout - 1]
{
  "success": true,
  "snapshot": "acceptance/happy",
  "components": [
    {
      "name": "Happy",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[application snapshot reference:stderr - 1]

---

[multiple policy sources with one source group:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-multiple-sources@sha256:${REGISTRY_acceptance/ec-multiple-sources:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Has a warning"
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-multiple-sources}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-multiple-sources}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/repository1.git?ref=95175b6ea9bb28c645186c6624ff904812ebbca7",
          "git::${GITHOST}/git/repository2.git?ref=9998384962ba66481defc409b0f821d222ba3366",
          "git::${GITHOST}/git/repository3.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[multiple policy sources with one source group:stderr - 1]
Error: success criteria not met

---

[unexpected image signature cert:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/unexpected-keyless-cert@sha256:${REGISTRY_acceptance/unexpected-keyless-cert:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Image attestation check failed: no matching attestations: none of the expected identities matched what was in the certificate, got subjects [${CERT_IDENTITY}] with issuer ${CERT_ISSUER}",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Image signature check failed: no matching signatures: none of the expected identities matched what was in the certificate, got subjects [${CERT_IDENTITY}] with issuer ${CERT_ISSUER}",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/unexpected-keyless-cert.git?ref=${LATEST_COMMIT}"
        ]
      }
    ]
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[unexpected image signature cert:stderr - 1]
Error: success criteria not met

---

[invalid image signature:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/invalid-image-signature@sha256:${REGISTRY_acceptance/invalid-image-signature:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image attestations found matching the given public key. Verify the correct public key was provided, and one or more attestations were created. Error: no matching attestations: could not verify envelope: accepted signatures do not match threshold, Found: 0, Expected 1",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "No image signatures found matching the given public key. Verify the correct public key was provided, and a signature was created. Error: no matching signatures: searching log query: \u0026{0 } (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "${unknown_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/invalid-image-signature.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${unknown_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[invalid image signature:stderr - 1]
Error: success criteria not met

---

[policy rule filtering for successes:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ],
        "config": {
          "exclude": [
            "filtering.always_pass_with_collection",
            "filtering.always_fail_with_collection"
          ],
          "include": [
            "@stamps",
            "filtering.always_pass"
          ]
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering for successes:stderr - 1]

---

[happy day with missing git config:stdout - 1]

---

[happy day with missing git config:stderr - 1]
Error: no suitable config file found at git::${GITHOST}/git/happy-config.git?ref=${LATEST_COMMIT}

---

[using attestation time as effective time:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails in 2099",
          "metadata": {
            "effective_on": "${TIMESTAMP}"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/future-deny-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "2100-01-01T00:00:00Z"
}
---

[using attestation time as effective time:stderr - 1]
Error: success criteria not met

---

[inline application snapshot:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Happy",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[inline application snapshot:stderr - 1]

---

[happy day with keyless:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day-keyless@sha256:${REGISTRY_acceptance/ec-happy-day-keyless:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_attestation_signature_info"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_attestation_signer_certificate"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_signature_info"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_signer_certificate"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.unexpected_attestation_signer"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.unexpected_signer"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "${IMAGE_SIGNATURE_KEY_ID_acceptance/ec-happy-day-keyless}",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day-keyless}",
          "certificate": "-----BEGIN CERTIFICATE-----\nMIIExDCCAqygAwIBAgIUVWuPG0kQGby1lN5xITUPpSdU+nUwDQYJKoZIhvcNAQEL\nBQAwfjEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRYwFAYDVQQJEw01NDggTWFya2V0IFN0MQ4wDAYDVQQR\nEwU1NzI3NDEZMBcGA1UEChMQTGludXggRm91bmRhdGlvbjAeFw0yNDExMDExODQx\nMjRaFw0yNDExMDExODUxMjRaMAAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAR1\nT46ucF2XJa6OkPqKDoS06P7gpOAdeUhLqHel8B2pwikuLM5yDNQZNDuF8UBbVwb3\n+ZCws2lXUUa0pHvi7o4qo4IBgTCCAX0wDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQM\nMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBRGlgRX1XIbRc91h1mi2GKwJJzMATAfBgNV\nHSMEGDAWgBSWXdAUgFDhRyQkmUiqKG+HfiGkSzBOBgNVHREBAf8ERDBChkBodHRw\nczovL2t1YmVybmV0ZXMuaW8vbmFtZXNwYWNlcy9kZWZhdWx0L3NlcnZpY2VhY2Nv\ndW50cy9kZWZhdWx0MDoGCisGAQQBg78wAQEELGh0dHBzOi8va3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsMIGJBgorBgEEAdZ5AgQCBHsEeQB3AHUA\njEU0vFMNcAm0+po76FN5x5c+82/BXCn2+nBXuqHsu1MAAAGS6Qg/uQAABAMARjBE\nAiBBMJT6XXyJv8i6BrCfy6Q7FtUDiSo8rLWFBSNJNWhqWQIgLpmUkPtdnVWSwyQs\nRk4Yrq+A356mA+NgdFc6Ij1z0H0wDQYJKoZIhvcNAQELBQADggIBABmx1d1tM4kn\nJ8uSaj6AX2mefGOhQYB5iiHSCgWCH3M6THWwY9Kn8cRI44azxDK6421cA8lNK3yT\nZ7NMqmEdNVuS1jRlQIaxedjIwoCRdc/UTZuzyutcH1N9cnSxjwsqj8G+xM6Y8CCy\ncuxfXv2Y44sJnb+k2DzHVqsdaS6TieFNhSKOSxifvqE4ESrkz4v8O6i3UGhbPSjY\nIB0ih4UZZks0BBViy05nro6nh4KVSZOBremYR6qbmMUZsoFcDiGN30aeTv0E546A\nqbiZ5e7NqC0ZT6w9H2ViHReC9BH35CkS85u1+T5j6CqXWTUoMk16yk4NHBrFOjKC\n18boN+VFOKv1KFlUlaMXUiVNmdznfJAGjCR3fWgH0274/pNmgIJvZDCetV+0Z8xx\nYbXm21Rctxw97bcV5n+oBHtKcXDz79+MU0NBYCtIoB1QrJIW8jIvUrRz8G8m2fW2\non3gD3Ol1R9Qhv3FwLO1eQp38lP8bCLUkgjwRjtp263jUOqp2yU3KKp0OAQS7gp9\nVM7JYLWS2z8+v1b7wlEScrvR/UwMDRG7fra1TRkezipEp5yzvk61omal3/7E2S6M\nq91NVoW6XMVs35c69P7FOOiilaTOpmzxcyfxjGolfbfTd/CJn8VE2xzw/Zjyemm4\nUdhYg6efORpknvU4f2MhTCurGDkxlTD9\n-----END CERTIFICATE-----\n",
          "chain": [
            "-----BEGIN CERTIFICATE-----\nMIIFwzCCA6ugAwIBAgIIL9xSscbf9b8wDQYJKoZIhvcNAQELBQAwfjEMMAoGA1UE\nBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRYwFAYDVQQJEw01NDggTWFya2V0IFN0MQ4wDAYDVQQREwU1NzI3NDEZMBcG\nA1UEChMQTGludXggRm91bmRhdGlvbjAeFw0yNDExMDExODQwMzlaFw0yNTExMDEx\nODQwMzlaMH4xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQG\nA1UEBxMNU2FuIEZyYW5jaXNjbzEWMBQGA1UECRMNNTQ4IE1hcmtldCBTdDEOMAwG\nA1UEERMFNTcyNzQxGTAXBgNVBAoTEExpbnV4IEZvdW5kYXRpb24wggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQDoGu5kO3KF1poEEXXTD/ZYnrwSoRTdlN13\nUEW+7mKKVyjNl6WprbT21Mgxbr6LdildUPdGPS9CLamvFbectztzL7AUzrO7ArLt\naOeDMO9kdSQ4TmNKgh4nqbo+CfCwahPtekhP645WE2VmdXjm5AAufG3LwaI2qOgt\nqL3kG86G0PFgQqD3WBwpp4Z4UvCXTY1hFXQ6GPqi3woU5AcbeClr3OdhU03NpOsK\nzR8FAgF4ZiByWUCGchyweakz0A/jrashDzxfQRV1DxbCfwXxmZh/i9P3AHMwdeBd\nfaiMqHQZphN/NSAQVuGcJP6Ue8ZRs6hgUXSH+Za6S22WW8gFnFqLjIOGNKBdP7mG\nZ+1uiwTArGtkzeTyJc+llEUAxB70rGn8TNCN/GnOUfg5XvIh/olTOEBli7BX8XHh\n9rVkmfXRF3IPXWrn0Ud/OC9ZcPobZzP8Gqz+3iZSwEuukmBRrw6LrRYfBqP1LzWp\n1oPkXhu5hAmsXr5jNLudiuBKgnXcasbsrxqLfuSSG0yIFWtUCO5RuhW7rcFAjzwj\nf7DUpPhbhkxpH2wl11CgsaHRNXQ8mbR4ItLbc3mpQLSK87m3r01J3bHAcQ8nabCI\nrDPOJA0GuP6FSwMQl/NYi+Xv58U4jELoql4VcwpxOjwUwVZTg3SeHnzqN1Uyv7ys\niYtUkOM74QIDAQABo0UwQzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB\n/wIBATAdBgNVHQ4EFgQUll3QFIBQ4UckJJlIqihvh34hpEswDQYJKoZIhvcNAQEL\nBQADggIBAKDpnu380g9rfT1Bh1FsI3aBJocUTNqI/+yfRxiXQmhP1SnTl80fcRgK\n0K5pLvnnBgjOknOXZctljoI2b+rFhz/B//zQlNfOJRAHWIvYWyY8Rs1RweSZbnTE\ny9RcZi8mstLPvnzZZIxI+iqieode+KJogbb2TsHppsANXYtFhIPpkNBjzORCJ+Lk\nn0hCfGz0Oex/UnK3gP3f1ybuBqwGAb/UkMBD2H0xfnCiPzv90UxzpFeX9on3eWha\nm72EtKepZFxcA47GLp89m06psf2U3mxEWC4MZjGwmyc9p0psRCa1xQISDPveBuE4\nyBksVnzLTciPmZnLCuoMco1XH+8o6Wu1QjlriVTXNOK/7o+BFVbJFaTPgZx5mqT1\nGgXLbhb1SRNwHTu85bNmAZxGbiqF1/jGfU5n6QVrQtBEj6mYoLQJTIxgjH+Npq+n\nvo9T9Au4++8nHgxXkefm9OBphJnHVbrNr0yP43KJXnBmxlMRZnj35kXxejD2UAxH\n1TMJbcP3gYflEu2LtpOkpZE6G41wtJBhxweaXg4FQC0i3UtaBmUMVdz6doXk8zYM\nEKuDujmH2NiV00LWTxWY48qCIaXUzX/PFa/6koAghoMjpoxcq+nu4gFw8++sNb0r\nVc35+WJ+XsNKXlDb4WlRGzRtMbydcYSVvhSG27w9OFIE4+7ufCtX\n-----END CERTIFICATE-----\n"
          ],
          "metadata": {
            "Fulcio Issuer": "${CERT_ISSUER}",
            "Issuer": "O=Linux Foundation,POSTALCODE=57274,STREET=548 Market St,L=San Francisco,ST=California,C=USA",
            "Not After": "${TIMESTAMP}",
            "Not Before": "${TIMESTAMP}",
            "Serial Number": "556b8f1b491019bcb594de7121350fa52754fa75",
            "Subject Alternative Name": "URIs:${CERT_IDENTITY}"
          }
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1/PipelineRun",
          "signatures": [
            {
              "keyid": "${ATTESTATION_SIGNATURE_KEY_ID_acceptance/ec-happy-day-keyless}",
              "sig": "MEQCIBN4HrxK/7Bx2psdZI0gqyJoXgVrZGdsOa4D+0bozyoPAiB12h4O3lBn5ywE4wtDaa9bKRCQa6gelQ40cxkF8vTlXA==",
              "certificate": "-----BEGIN CERTIFICATE-----\nMIIExTCCAq2gAwIBAgIUQt+g0VKjxh3H1hkMFSVxe0a5AKEwDQYJKoZIhvcNAQEL\nBQAwfjEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRYwFAYDVQQJEw01NDggTWFya2V0IFN0MQ4wDAYDVQQR\nEwU1NzI3NDEZMBcGA1UEChMQTGludXggRm91bmRhdGlvbjAeFw0yNDExMDExODQx\nMjdaFw0yNDExMDExODUxMjdaMAAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATZ\nHGFPsFj6x2BNlPv3CHfz2RejFWMZrWqLoGYGrh8WzMlVv+PqgzlUkzG74+SGi6sy\nL9QI4tN3mPkS8dMyqFsao4IBgjCCAX4wDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQM\nMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBTsFsfOKWIy2oatzga+LILBwmjZmDAfBgNV\nHSMEGDAWgBSWXdAUgFDhRyQkmUiqKG+HfiGkSzBOBgNVHREBAf8ERDBChkBodHRw\nczovL2t1YmVybmV0ZXMuaW8vbmFtZXNwYWNlcy9kZWZhdWx0L3NlcnZpY2VhY2Nv\ndW50cy9kZWZhdWx0MDoGCisGAQQBg78wAQEELGh0dHBzOi8va3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsMIGKBgorBgEEAdZ5AgQCBHwEegB4AHYA\njEU0vFMNcAm0+po76FN5x5c+82/BXCn2+nBXuqHsu1MAAAGS6QhJ0QAABAMARzBF\nAiAPB25ovviiwXIWnGRSlAAgowA27JAyH8Kxnn/5EMPILAIhANx5+EJfmNUGls8s\nLPQ3UAXaDImbtN00TBzFI/33wBu6MA0GCSqGSIb3DQEBCwUAA4ICAQBFNHoLQx0f\nWa7NxPUS0D8Q1hlx9FuHGLa/bZGNR89IkeovcntXJUXC/feO2G0uVTpmr+QD6bne\nJ/HvJgqdnODuOslMVulitfnXrzcW+5llMTkBlIsLi8ONGHJT4ZXrsjKJ1EeFXXRM\nOTj6pat90D/SN03p+nTxidlU4Lgbtffo9rxdZJ72UzmQ2xZ7IxM8CjwovEa2rFBi\n9Q1ASgAJhGYABzoU5kE7UJZb4xLXSV+QX/p0yrYebNlSX9cxlOs1Qm+s40tGlT36\nCwKb0KW6HVFFyIkX+hfMnubYwbBuNbt/Jb1UQxdewFukhyibxht0sPUgIGfrnRYs\ncLbzAnNX+QcR1JiQq/801MIFUN2/0PBJKw92wOjZUlbC++1P8W7CYugDS3P5tsDD\n92XQkK/yhGi4xXrH0DCBL287otftQq/Kilw7i87bo/TSCQ4/c6rGbrOYRoWBAqgk\nVM68Zej4s7uqo8fIVvRc2uFyCbUDH2d1N5n+WT/9+NcQkAbcTZj9NAS7Bxa4cXHt\ny3XnxNPHzp47s53UT5d3r32UZ4m5yJt3Yjl7EduKyiFLnKR1pyBD6W9T5S7IHICv\nUA+VK0h2vl799hEQBPWJzrHI4Cj1W4aH3jgx9KeE4WkPb3K2ajJM1aTH7zS1ohUZ\nRyUlOD21BLLkg/eFBsvNSdWbxpQj+MZMyw==\n-----END CERTIFICATE-----\n",
              "chain": [
                "-----BEGIN CERTIFICATE-----\nMIIFwzCCA6ugAwIBAgIIL9xSscbf9b8wDQYJKoZIhvcNAQELBQAwfjEMMAoGA1UE\nBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRYwFAYDVQQJEw01NDggTWFya2V0IFN0MQ4wDAYDVQQREwU1NzI3NDEZMBcG\nA1UEChMQTGludXggRm91bmRhdGlvbjAeFw0yNDExMDExODQwMzlaFw0yNTExMDEx\nODQwMzlaMH4xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQG\nA1UEBxMNU2FuIEZyYW5jaXNjbzEWMBQGA1UECRMNNTQ4IE1hcmtldCBTdDEOMAwG\nA1UEERMFNTcyNzQxGTAXBgNVBAoTEExpbnV4IEZvdW5kYXRpb24wggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQDoGu5kO3KF1poEEXXTD/ZYnrwSoRTdlN13\nUEW+7mKKVyjNl6WprbT21Mgxbr6LdildUPdGPS9CLamvFbectztzL7AUzrO7ArLt\naOeDMO9kdSQ4TmNKgh4nqbo+CfCwahPtekhP645WE2VmdXjm5AAufG3LwaI2qOgt\nqL3kG86G0PFgQqD3WBwpp4Z4UvCXTY1hFXQ6GPqi3woU5AcbeClr3OdhU03NpOsK\nzR8FAgF4ZiByWUCGchyweakz0A/jrashDzxfQRV1DxbCfwXxmZh/i9P3AHMwdeBd\nfaiMqHQZphN/NSAQVuGcJP6Ue8ZRs6hgUXSH+Za6S22WW8gFnFqLjIOGNKBdP7mG\nZ+1uiwTArGtkzeTyJc+llEUAxB70rGn8TNCN/GnOUfg5XvIh/olTOEBli7BX8XHh\n9rVkmfXRF3IPXWrn0Ud/OC9ZcPobZzP8Gqz+3iZSwEuukmBRrw6LrRYfBqP1LzWp\n1oPkXhu5hAmsXr5jNLudiuBKgnXcasbsrxqLfuSSG0yIFWtUCO5RuhW7rcFAjzwj\nf7DUpPhbhkxpH2wl11CgsaHRNXQ8mbR4ItLbc3mpQLSK87m3r01J3bHAcQ8nabCI\nrDPOJA0GuP6FSwMQl/NYi+Xv58U4jELoql4VcwpxOjwUwVZTg3SeHnzqN1Uyv7ys\niYtUkOM74QIDAQABo0UwQzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB\n/wIBATAdBgNVHQ4EFgQUll3QFIBQ4UckJJlIqihvh34hpEswDQYJKoZIhvcNAQEL\nBQADggIBAKDpnu380g9rfT1Bh1FsI3aBJocUTNqI/+yfRxiXQmhP1SnTl80fcRgK\n0K5pLvnnBgjOknOXZctljoI2b+rFhz/B//zQlNfOJRAHWIvYWyY8Rs1RweSZbnTE\ny9RcZi8mstLPvnzZZIxI+iqieode+KJogbb2TsHppsANXYtFhIPpkNBjzORCJ+Lk\nn0hCfGz0Oex/UnK3gP3f1ybuBqwGAb/UkMBD2H0xfnCiPzv90UxzpFeX9on3eWha\nm72EtKepZFxcA47GLp89m06psf2U3mxEWC4MZjGwmyc9p0psRCa1xQISDPveBuE4\nyBksVnzLTciPmZnLCuoMco1XH+8o6Wu1QjlriVTXNOK/7o+BFVbJFaTPgZx5mqT1\nGgXLbhb1SRNwHTu85bNmAZxGbiqF1/jGfU5n6QVrQtBEj6mYoLQJTIxgjH+Npq+n\nvo9T9Au4++8nHgxXkefm9OBphJnHVbrNr0yP43KJXnBmxlMRZnj35kXxejD2UAxH\n1TMJbcP3gYflEu2LtpOkpZE6G41wtJBhxweaXg4FQC0i3UtaBmUMVdz6doXk8zYM\nEKuDujmH2NiV00LWTxWY48qCIaXUzX/PFa/6koAghoMjpoxcq+nu4gFw8++sNb0r\nVc35+WJ+XsNKXlDb4WlRGzRtMbydcYSVvhSG27w9OFIE4+7ufCtX\n-----END CERTIFICATE-----\n"
              ],
              "metadata": {
                "Fulcio Issuer": "${CERT_ISSUER}",
                "Issuer": "O=Linux Foundation,POSTALCODE=57274,STREET=548 Market St,L=San Francisco,ST=California,C=USA",
                "Not After": "${TIMESTAMP}",
                "Not Before": "${TIMESTAMP}",
                "Serial Number": "42dfa0d152a3c61dc7d6190c1525717b46b900a1",
                "Subject Alternative Name": "URIs:${CERT_IDENTITY}"
              }
            }
          ]
        }
      ]
    }
  ],
  "key": "",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ]
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with keyless:stderr - 1]

---

[mismatched image digest in attestation:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/bad-actor@sha256:${REGISTRY_acceptance/bad-actor:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image attestations found matching the given public key. Verify the correct public key was provided, and one or more attestations were created. Error: no matching attestations: no matching subject digest found",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/mismatched-image-digest.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[mismatched image digest in attestation:stderr - 1]
Error: success criteria not met

---

[artifact relocation:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/destination@sha256:${REGISTRY_IMAGE_acceptance/destination:latest|acceptance/source:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/source}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/source}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[artifact relocation:stderr - 1]

---
[detailed failures output:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term",
            "collections": [
              "A"
            ],
            "description": "This rule will always fail. To exclude this rule add \"main.reject_with_term:term1\" to the `exclude` section of the policy configuration.",
            "solution": "None",
            "term": "term1",
            "title": "Reject with term rule"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term",
            "collections": [
              "A"
            ],
            "description": "This rule will always fail. To exclude this rule add one or more of \"main.reject_with_term:term2\", \"main.reject_with_term:term3\" to the `exclude` section of the policy configuration.",
            "solution": "None",
            "term": [
              "term2",
              "term3"
            ],
            "title": "Reject with term rule"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector",
            "collections": [
              "A"
            ],
            "description": "This rule will always fail. To exclude this rule add \"main.rejector\" to the `exclude` section of the policy configuration.",
            "solution": "None",
            "title": "Reject rule"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor",
            "collections": [
              "A"
            ],
            "description": "This rule will never fail",
            "title": "Allow rule"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[detailed failures output:stderr - 1]
Error: success criteria not met

---
[detailed failures output:${TMPDIR}/output.txt - 1]
Success: false
Result: FAILURE
Violations: 3, Warnings: 0, Successes: 4
Component: Unnamed
ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}

Results:
[31m✕[0m [31m[Violation] main.reject_with_term[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Reason: Fails always (term1)
  Title: Reject with term rule
  Description: This rule will always fail. To exclude this rule add "main.reject_with_term:term1" to the `exclude` section of the
  policy configuration.
  Solution: None

[31m✕[0m [31m[Violation] main.reject_with_term[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Reason: Fails always (term2)
  Title: Reject with term rule
  Description: This rule will always fail. To exclude this rule add one or more of "main.reject_with_term:term2",
  "main.reject_with_term:term3" to the `exclude` section of the policy configuration.
  Solution: None

[31m✕[0m [31m[Violation] main.rejector[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Reason: Fails always
  Title: Reject rule
  Description: This rule will always fail. To exclude this rule add "main.rejector" to the `exclude` section of the policy
  configuration.
  Solution: None

[32m✓[0m [32m[Success] builtin.attestation.signature_check[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Title: Attestation signature check passed
  Description: The attestation signature matches available signing materials.

[32m✓[0m [32m[Success] builtin.attestation.syntax_check[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Title: Attestation syntax check passed
  Description: The attestation has correct syntax.

[32m✓[0m [32m[Success] builtin.image.signature_check[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Title: Image signature check passed
  Description: The image signature matches available signing materials.

[32m✓[0m [32m[Success] main.acceptor[0m
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Title: Allow rule
  Description: This rule will never fail


---
[future failure is a deny when using effective-date flag:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails in 2099",
          "metadata": {
            "effective_on": "${TIMESTAMP}"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/future-deny-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "2100-01-01T12:00:00Z"
}
---

[future failure is a deny when using effective-date flag:stderr - 1]
Error: success criteria not met

---

[Using OCI bundles:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/my-image@sha256:${REGISTRY_acceptance/my-image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/my-image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/my-image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "oci::${REGISTRY}/acceptance/happy-day-policy:tag@sha256:${REGISTRY_acceptance/happy-day-policy:tag_DIGEST}",
          "oci::${REGISTRY}/acceptance/allow-all:latest@sha256:${REGISTRY_acceptance/allow-all:latest_DIGEST}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Using OCI bundles:stderr - 1]

---

[Dropping rego capabilities:stdout - 1]

---

[Dropping rego capabilities:stderr - 1]
Error: error validating image ${REGISTRY}/acceptance/ec-happy-day of component Unnamed: load: loading policies: get compiler: 3 errors occurred:
${TEMP}/ec-work-${RANDOM}/policy/${RANDOM}/main.rego:14: rego_type_error: undefined function opa.runtime
${TEMP}/ec-work-${RANDOM}/policy/${RANDOM}/main.rego:22: rego_type_error: undefined function http.send
${TEMP}/ec-work-${RANDOM}/policy/${RANDOM}/main.rego:33: rego_type_error: undefined function net.lookup_ip_addr

---

[happy day:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day:stderr - 1]

---

[happy day with extra rule data:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "key": "value"
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with extra rule data:stderr - 1]

---

[rule dependencies:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Failure",
          "metadata": {
            "code": "pkg.fails"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Warning",
          "metadata": {
            "code": "pkg.warns"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/with-dependencies.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[rule dependencies:stderr - 1]
Error: success criteria not met

---

[successes are not duplicated:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/unique-successes@sha256:${REGISTRY_acceptance/unique-successes:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Always fails",
          "metadata": {
            "code": "gloomy.sad"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "gloomy.happy"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/unique-successes}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/unique-successes}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/unique-successes.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[successes are not duplicated:stderr - 1]

---

[Custom rule data:${TMPDIR}/custom-rule-data.yaml - 1]
- - config:
      default_sigstore_opts:
        certificate_identity: ""
        certificate_identity_regexp: ""
        certificate_oidc_issuer: ""
        certificate_oidc_issuer_regexp: ""
        ignore_rekor: false
        public_key: |
${__________known_PUBLIC_KEY}
        rekor_url: ${REKOR}
      policy:
        when_ns: 1401494400000000000
    rule_data__configuration__:
      custom: data1
  - config:
      default_sigstore_opts:
        certificate_identity: ""
        certificate_identity_regexp: ""
        certificate_oidc_issuer: ""
        certificate_oidc_issuer_regexp: ""
        ignore_rekor: false
        public_key: |
${__________known_PUBLIC_KEY}
        rekor_url: ${REKOR}
      policy:
        when_ns: 1401494400000000000
    rule_data__configuration__:
      other: data2

---

[image config:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image-config@sha256:${REGISTRY_acceptance/image-config:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "image_config.image_distinct_title_set",
            "description": "Check if the image has a different value than its parent image for the org.opencontainers.image.title label.",
            "title": "Image Distinct Title Label"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "image_config.image_title_set",
            "description": "Check if the image has the org.opencontainers.image.title label set.",
            "title": "Image Title Label"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "image_config.parent_image_title_set",
            "description": "Check if the parent image has the org.opencontainers.image.title label set.",
            "title": "Parent Image Title Label"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image-config}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image-config}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/image-config-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[image config:stderr - 1]

---

[Output attestations:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/my-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Output attestations:stderr - 1]

---

[Output attestations:${TMPDIR}/attestation.jsonl - 1]
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://slsa.dev/provenance/v0.2",
  "subject": [
    {
      "name": "acceptance/image",
      "digest": {
        "sha256": "${REGISTRY_acceptance/image:latest_DIGEST}"
      }
    }
  ],
  "predicate": {
    "builder": {
      "id": "https://tekton.dev/chains/v2"
    },
    "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
    "invocation": {
      "configSource": {}
    }
  }
}
---

[policy input output:stdout - 1]
{
  "attestations": [
    {
      "statement": {
        "_type": "https://in-toto.io/Statement/v0.1",
        "predicateType": "https://slsa.dev/provenance/v0.2",
        "subject": [
          {
            "name": "acceptance/policy-input-output",
            "digest": {
              "sha256": "${REGISTRY_acceptance/policy-input-output:latest_DIGEST}"
            }
          }
        ],
        "predicate": {
          "builder": {
            "id": "https://tekton.dev/chains/v2"
          },
          "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "invocation": {
            "configSource": {}
          }
        }
      },
      "signatures": [
        {
          "keyid": "",
          "sig": "${ATTESTATION_SIGNATURE_acceptance/policy-input-output}"
        }
      ]
    }
  ],
  "image": {
    "ref": "${REGISTRY}/acceptance/policy-input-output@sha256:${REGISTRY_acceptance/policy-input-output:latest_DIGEST}",
    "signatures": [
      {
        "keyid": "",
        "sig": "${IMAGE_SIGNATURE_acceptance/policy-input-output}"
      }
    ],
    "config": {
      "Labels": {
        "org.opencontainers.image.title": "acceptance/policy-input-output"
      }
    },
    "parent": {
      "ref": "${REGISTRY}/acceptance/policy-input-output/parent:latest@sha256:${REGISTRY_acceptance/policy-input-output/parent:latest_DIGEST}",
      "config": {
        "Labels": {
          "org.opencontainers.image.title": "acceptance/policy-input-output/parent"
        }
      }
    },
    "source": {}
  },
  "snapshot": {
    "application": "",
    "components": [
      {
        "name": "Unnamed",
        "containerImage": "${REGISTRY}/acceptance/policy-input-output",
        "source": {}
      }
    ],
    "artifacts": {}
  }
}
---

[policy input output:stderr - 1]

---

[ignore rekor:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ignore-rekor@sha256:${REGISTRY_acceptance/ignore-rekor:latest_DIGEST}",
      "source": {},
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ignore-rekor}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ignore-rekor}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/ignore-rekor.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[ignore rekor:stderr - 1]

---

[rekor entries required:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/rekor-by-default@sha256:${REGISTRY_acceptance/rekor-by-default:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image attestations found matching the given public key. Verify the correct public key was provided, and one or more attestations were created. Error: no matching attestations: searching log query: \u0026{0 } (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "No image signatures found matching the given public key. Verify the correct public key was provided, and a signature was created. Error: no matching signatures: searching log query: \u0026{0 } (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/rekor-by-default.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[rekor entries required:stderr - 1]
Error: success criteria not met

---

[OLM manifests:stderr - 1]

---

[OLM manifests:${TMPDIR}/input.json - 1]
{
  "attestations": [
    {
      "statement": {
        "_type": "https://in-toto.io/Statement/v0.1",
        "predicateType": "https://slsa.dev/provenance/v0.2",
        "subject": [
          {
            "name": "acceptance/image",
            "digest": {
              "sha256": "${REGISTRY_acceptance/image:latest_DIGEST}"
            }
          }
        ],
        "predicate": {
          "builder": {
            "id": "https://tekton.dev/chains/v2"
          },
          "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "invocation": {
            "configSource": {}
          }
        }
      },
      "signatures": [
        {
          "keyid": "",
          "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
        }
      ]
    }
  ],
  "image": {
    "ref": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
    "signatures": [
      {
        "keyid": "",
        "sig": "${IMAGE_SIGNATURE_acceptance/image}"
      }
    ],
    "config": {
      "Labels": {
        "operators.operatorframework.io.bundle.manifests.v1": "manifests/",
        "org.opencontainers.image.title": "acceptance/image"
      }
    },
    "files": {
      "manifests/some.clusterserviceversion.yaml": {
        "apiVersion": "operators.coreos.com/v1alpha1",
        "kind": "ClusterServiceVersion",
        "metadata": {
          "annotations": null,
          "name": "memcached-operator.v0.10.0"
        },
        "spec": {
          "customresourcedefinitions": {
            "owned": [
              {
                "kind": "Memcached",
                "name": "memcacheds.cache.example.com",
                "version": "v1alpha1"
              }
            ],
            "required": [
              {
                "kind": "Other",
                "name": "others.example.com",
                "version": "v1alpha1"
              }
            ]
          },
          "description": "This is an operator for memcached.",
          "displayName": "Memcached Operator",
          "install": {
            "spec": {
              "clusterPermissions": [
                {
                  "rules": [
                    {
                      "apiGroups": [
                        ""
                      ],
                      "resources": [
                        "serviceaccounts"
                      ],
                      "verbs": [
                        "*"
                      ]
                    }
                  ],
                  "serviceAccountName": "memcached-operator"
                }
              ],
              "deployments": [
                {
                  "name": "memcached-operator",
                  "spec": {
                    "replicas": 1
                  }
                }
              ],
              "permissions": [
                {
                  "rules": [
                    {
                      "apiGroups": [
                        ""
                      ],
                      "resources": [
                        "pods"
                      ],
                      "verbs": [
                        "*"
                      ]
                    }
                  ],
                  "serviceAccountName": "memcached-operator"
                }
              ]
            },
            "strategy": "deployment"
          },
          "installModes": [
            {
              "supported": true,
              "type": "OwnNamespace"
            },
            {
              "supported": true,
              "type": "SingleNamespace"
            },
            {
              "supported": false,
              "type": "MultiNamespace"
            },
            {
              "supported": true,
              "type": "AllNamespaces"
            }
          ],
          "keywords": [
            "memcached",
            "app"
          ],
          "maintainers": [
            {
              "email": "corp@example.com",
              "name": "Some Corp"
            }
          ],
          "maturity": "alpha",
          "minKubeVersion": "1.16.0",
          "provider": {
            "name": "Example",
            "url": "www.example.com"
          },
          "version": "0.10.0"
        }
      },
      "manifests/some.crd.yaml": {
        "apiVersion": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.4.1"
          },
          "name": "memcacheds.cache.example.com"
        },
        "spec": {
          "group": "cache.example.com",
          "names": {
            "kind": "Memcached",
            "listKind": "MemcachedList",
            "plural": "memcacheds",
            "singular": "memcached"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "Memcached is the Schema for the memcacheds API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "MemcachedSpec defines the desired state of Memcached",
                      "properties": {
                        "size": {
                          "description": "Size defines the number of Memcached instances",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "MemcachedStatus defines the observed state of Memcached",
                      "properties": {
                        "nodes": {
                          "description": "Nodes store the name of the pods which are running Memcached instances",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        },
        "status": {
          "acceptedNames": {
            "kind": "",
            "plural": ""
          },
          "conditions": [],
          "storedVersions": []
        }
      }
    },
    "source": {}
  },
  "snapshot": {
    "application": "",
    "components": [
      {
        "name": "Unnamed",
        "containerImage": "${REGISTRY}/acceptance/image",
        "source": {}
      }
    ],
    "artifacts": {}
  }
}
---

[OLM manifests:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "olm_manifests.olm_manifest_csv"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "olm_manifests.olm_manifests"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/olm-manifests.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Unsupported policies:stdout - 1]

---

[Unsupported policies:stderr - 1]
Error: error validating image ${REGISTRY}/acceptance/image of component Unnamed: the rule "deny = true { true }" returns an unsupported value, at main.rego:5

---

[fetch OCI blob:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/fetch-oci-blob@sha256:${REGISTRY_acceptance/fetch-oci-blob:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "blobby.fetchable"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "blobby.spam"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/fetch-oci-blob}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/fetch-oci-blob}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/fetch-oci-blob-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[fetch OCI blob:stderr - 1]

---

[policy rule filtering per source:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/happy-day-policy.git?ref=${LATEST_COMMIT}"
        ],
        "config": {
          "exclude": [
            "filtering.always_pass_with_collection",
            "filtering.always_fail_with_collection"
          ],
          "include": [
            "@stamps",
            "filtering.always_pass"
          ]
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering per source:stderr - 1]

---

[PURL functions:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/purl@sha256:${REGISTRY_acceptance/purl:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "PURL is invalid \"this-is-not-a-valid-purl\"",
          "metadata": {
            "code": "purl.is_valid_fail"
          }
        },
        {
          "msg": "PURL can't be parsed \"this-is-not-a-valid-purl\"",
          "metadata": {
            "code": "purl.parse_fail"
          }
        },
        {
          "msg": "PURL parsed as: type: \"rpm\", namespace: \"rhel\", name: \"coreutils-single\", version: \"8.32-34.el9\", qualifiers: \"[{\\\"key\\\": \\\"arch\\\", \\\"value\\\": \\\"x86_64\\\"}, {\\\"key\\\": \\\"distro\\\", \\\"value\\\": \\\"rhel-9.3\\\"}, {\\\"key\\\": \\\"upstream\\\", \\\"value\\\": \\\"coreutils-8.32-34.el9.src.rpm\\\"}]\", subpath: \"\"",
          "metadata": {
            "code": "purl.parsed"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "purl.is_valid_pass"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/purl}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/purl}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/purl-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[PURL functions:stderr - 1]
time="${TIMESTAMP}" level=error msg="Parsing PURL \"this-is-not-a-valid-purl\" failed: purl scheme is not \"pkg\": \"\""
Error: success criteria not met

---

[fetch OCI image manifest:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/oci-image-manifest@sha256:${REGISTRY_acceptance/oci-image-manifest:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "manifest.match"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/oci-image-manifest}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/oci-image-manifest}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/oci-image-manifest-policy?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[fetch OCI image manifest:stderr - 1]

---

[sigstore functions:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/sigstore@sha256:${REGISTRY_acceptance/sigstore:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "sigstore.valid"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/sigstore}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/sigstore}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/sigstore.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[sigstore functions:stderr - 1]

---

[many components and sources:stdout - 1]
{
  "success": true,
  "snapshot": "acceptance/multitude",
  "components": [
    {
      "name": "component9",
      "containerImage": "${REGISTRY}/multitude/image-9@sha256:${REGISTRY_multitude/image-9:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-9}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-9}"
            }
          ]
        }
      ]
    },
    {
      "name": "component8",
      "containerImage": "${REGISTRY}/multitude/image-8@sha256:${REGISTRY_multitude/image-8:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-8}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-8}"
            }
          ]
        }
      ]
    },
    {
      "name": "component7",
      "containerImage": "${REGISTRY}/multitude/image-7@sha256:${REGISTRY_multitude/image-7:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-7}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-7}"
            }
          ]
        }
      ]
    },
    {
      "name": "component6",
      "containerImage": "${REGISTRY}/multitude/image-6@sha256:${REGISTRY_multitude/image-6:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-6}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-6}"
            }
          ]
        }
      ]
    },
    {
      "name": "component5",
      "containerImage": "${REGISTRY}/multitude/image-5@sha256:${REGISTRY_multitude/image-5:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-5}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-5}"
            }
          ]
        }
      ]
    },
    {
      "name": "component4",
      "containerImage": "${REGISTRY}/multitude/image-4@sha256:${REGISTRY_multitude/image-4:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-4}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-4}"
            }
          ]
        }
      ]
    },
    {
      "name": "component3",
      "containerImage": "${REGISTRY}/multitude/image-3@sha256:${REGISTRY_multitude/image-3:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-3}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-3}"
            }
          ]
        }
      ]
    },
    {
      "name": "component2",
      "containerImage": "${REGISTRY}/multitude/image-2@sha256:${REGISTRY_multitude/image-2:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-2}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-2}"
            }
          ]
        }
      ]
    },
    {
      "name": "component1",
      "containerImage": "${REGISTRY}/multitude/image-1@sha256:${REGISTRY_multitude/image-1:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-1}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-1}"
            }
          ]
        }
      ]
    },
    {
      "name": "component0",
      "containerImage": "${REGISTRY}/multitude/image-0@sha256:${REGISTRY_multitude/image-0:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_multitude/image-0}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_multitude/image-0}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "key": "value"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "something": "here"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "key": "different"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "hello": "world"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "foo": "bar"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "peek": "poke"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "hide": "seek"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "hokus": "pokus"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "mr": "mxyzptlk"
        }
      },
      {
        "policy": [
          "git::${GITHOST}/git/multitude-policy.git?ref=${LATEST_COMMIT}"
        ],
        "ruleData": {
          "more": "data"
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[many components and sources:stderr - 1]

---

[Format options:stdout - 1]
Success: false
Result: FAILURE
Violations: 3, Warnings: 0, Successes: 4
Component: Unnamed
ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}

Results:
✕ [Violation] main.reject_with_term
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Reason: Fails always (term1)

✕ [Violation] main.reject_with_term
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Reason: Fails always (term2)

✕ [Violation] main.rejector
  ImageRef: ${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}
  Reason: Fails always


---

[Format options:stderr - 1]
Error: success criteria not met

---

[Format options:${TMPDIR}/output.json - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/my-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[fetch OCI image files:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/oci-image-files@sha256:${REGISTRY_acceptance/oci-image-files:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "files.match"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/oci-image-files}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/oci-image-files}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/oci-image-files-policy?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[fetch OCI image files:stderr - 1]

---

[severity is dynamically adjusted:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Failure to failure",
          "metadata": {
            "severity": "failure"
          }
        },
        {
          "msg": "Warning to failure",
          "metadata": {
            "severity": "failure"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Failure to warning",
          "metadata": {
            "severity": "warning"
          }
        },
        {
          "msg": "Warning to warning",
          "metadata": {
            "severity": "warning"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::${GITHOST}/git/dynamic-severity-policy.git?ref=${LATEST_COMMIT}"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[severity is dynamically adjusted:stderr - 1]
Error: success criteria not met

---
